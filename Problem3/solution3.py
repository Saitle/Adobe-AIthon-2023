"""Problem3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VlBc06YN20C5-hqXUzrWcm7UihpEWlUw
"""

import os
from ultralytics import YOLO
import shutil

class InvalidPathError(Exception):
    """Custom exception for invalid paths."""
    pass

def load_yolov8_model(model_path):
    """
    Load a pretrained YOLOv8 model from the given path.

    Args:
        model_path (str): Path to the YOLOv8 model file.

    Returns:
        YOLO: Pretrained YOLOv8 model.
    """
    try:
        return YOLO(model_path)
    except Exception as e:
        raise InvalidPathError(f"Model file '{model_path}' not found")
        return -1

def group_images(images, boxes, class_names):
    """
    Group images based on detected objects and their corresponding class names.

    This function takes a list of image paths, a list of bounding box coordinates, and a list of class names,
    and groups the images by the detected entities.

    Args:
        images (list of str): List of image paths.
        boxes (list of tuple): List of bounding box coordinates (x_min, y_min, x_max, y_max) for each detected object.
        class_names (list of str): List of class names corresponding to each detected object.

    Returns:
        dict: A dictionary mapping entity names to lists of image paths associated with that entity.
    """

    # Initializing a dictionary to store the images for each entity.
    entity_to_images = {}

    # Iterating over the images and the bounding boxes.
    for  box, class_name in zip( boxes, class_names):
        # Getting the entity name for the class ID.
        entity = str(class_name)

       # If the entity does not exist in the dictionary, creating it.
        if entity not in entity_to_images:
            entity_to_images[entity] = []

        # Adding the image to the list of images for the entity.
        entity_to_images[entity].append(images)

    # Returning the dictionary of images for each entity.
    return entity_to_images

def run_inference(model, image_paths, save=False, filter_classes=None, conf=0.5):
    """
    Run inference on the provided model for a single image and save the results in a CSV file.

    Args:
        model (YOLO): Pretrained YOLOv8n model.
        image_path (str): Path to the image file to perform inference on.
        save (bool): Whether to save the inference results or not.
    """
    results = []
    resultBoxes = []
    resultNames = []
    entity = []
    for path in image_paths:
        try:
           # Performing object detection on the image
            results.extend(model(path, save=save, conf=conf))

            for result in results:
              # Extracting bounding boxes and class names from the results
              result_boxes = [(x_min, y_min, x_max, y_max) for x_min, y_min, x_max, y_max in result.boxes.xyxy]
              result_names = [result.names[int(box.cls)] for box in result.boxes]
              resultBoxes.append(result_boxes)
              resultNames.append(result_names)

              # Grouping images by entities based on detected objects
              entity_to_images = group_images(result.path, result_boxes, result_names)
              entity.append(entity_to_images)

        except Exception as e:
            print(f"Error processing image '{path}': {e}")


    return entity


def main():
    model_path = "yolov8m.pt"
    images_directory = "All_Images"

    #Generating a list of image file paths
    image_files = [os.path.join(images_directory, f) for f in os.listdir(images_directory) if os.path.isfile(os.path.join(images_directory, f))]

    #Loading yolo model
    model = load_yolov8_model(model_path)

    # Running inference on the images.
    entity_to_images = run_inference(model, image_files)

    for i in range(len(entity_to_images)):
        for entity, images in entity_to_images[i].items():
            # Replacing spaces with underscores in entity names
            entity_name = entity.replace(" ", "_")

            if not os.path.exists(entity_name):
                os.mkdir(entity_name)

            for image in images:
                # Getting the filename without path
                filename = os.path.basename(image)
                # Copying the image to the entity folder with the modified name
                shutil.copy(image, os.path.join(entity_name, filename))


if __name__ == "__main__":
    main()

