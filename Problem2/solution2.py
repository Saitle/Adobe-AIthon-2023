"""Problem2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n7nlVs74iPK6oJ462YXGexRNT-AcKeul
"""

!pip install ultralytics
import os
from ultralytics import YOLO
import csv

class InvalidPathError(Exception):
    """Custom exception for invalid paths."""
    pass

def load_yolov8_model(model_path):
    """
    Load a pretrained YOLOv8 model from the provided path.

    Parameters:
        model_path (str): Path to the YOLOv8 model file.

    Returns:
        YOLO: Loaded YOLOv8 model.
    """
    try:
        return YOLO(model_path)
    except Exception as e:
        print(f"An Error occurred while loading the model. Error: {e}")
        return None

def run_inference_and_save(model, image_path, save=False, conf=0.5):
    """
    Perform inference on a single image using the provided YOLOv8 model and save the results in a CSV file.

    Parameters:
        model (YOLO): Loaded YOLOv8 model.
        image_path (str): Path to the input image.
        save (bool): Whether to save the inference visualization.
        conf (float): Confidence threshold for detection.

    Returns:
        None
    """
    try:
        results = model(image_path, save=save, conf=conf)
    except Exception as e:
        print(f"Error processing image '{image_path}': {e}")
        return

    results_dict = {}
    for result in results:
        result_boxes = [(x_min, y_min, x_max, y_max) for x_min, y_min, x_max, y_max in result.boxes.xyxy]
        result_names = [result.names[int(box.cls)] for box in result.boxes]

        for class_id, class_name in enumerate(result_names):
            if class_name in results_dict:
                results_dict[class_name] += 1
            else:
                results_dict[class_name] = 1

    # Calculating the total count of entities
    total_count = sum(results_dict.values())

    image_filename = os.path.basename(image_path)
    csv_filename = f"{os.path.splitext(image_filename)[0]}.csv"

    with open(csv_filename, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Entity', 'Count'])
        for label, count in results_dict.items():
            writer.writerow([label, count])

        # Adding the 'total' record to the CSV file
        writer.writerow(['total', total_count])

def main():
    model_path = 'yolov8m.pt'
    images_directory = 'All_Images'

    # Checking if image directory exists
    if not os.path.exists(images_directory):
        raise InvalidPathError(f"Image directory '{images_directory}' not found.")

    # Generating a list of all image file paths
    image_files = [os.path.join(images_directory, f) for f in os.listdir(images_directory) if os.path.isfile(os.path.join(images_directory, f))]

    # Filtering out only the image files (JPEG and JPG)
    image_paths = [f for f in image_files if f.lower().endswith(('.jpg', '.jpeg'))]

    # Loading the YOLOv8n model
    model = load_yolov8_model(model_path)

    # Creating a folder to store the results
    results_directory = 'results'
    if not os.path.exists(results_directory):
        os.makedirs(results_directory)

    # Running inference and save results for each image
    for image_path in image_paths:
        run_inference_and_save(model, image_path, save=False, conf=0.5)

        # Moving the created CSV files to the results folder
        csv_filename = f"{os.path.splitext(os.path.basename(image_path))[0]}.csv"
        os.rename(csv_filename, os.path.join(results_directory, csv_filename))

if __name__ == "__main__":
    main()
