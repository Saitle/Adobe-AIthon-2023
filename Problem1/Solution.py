"""Problem1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MNEC_DF4r7yivyeumIMno4Di199SBMc5
"""

import os
from ultralytics import YOLO

class InvalidPathError(Exception):
    """Custom exception for invalid paths."""
    pass

def load_yolov8_model(model_path):
    """
    Load a pretrained YOLOv8 model from the given path.

    Args:
        model_path (str): Path to the YOLOv8 model file.

    Returns:
        YOLO: Pretrained YOLOv8 model.

    Raises:
        InvalidPathError: if the model path doesn't exist
    """
    try:
        return YOLO(model_path)
    except Exception as e:
        raise InvalidPathError(f"Model file '{model_path}' not found") from e

def get_image_paths(directory_path, extensions=('.jpg', '.jpeg')):
    """
    Get a list of valid image file paths from the given directory.

    Args:
        directory_path (str): Path to the directory containing image files.
        extensions (tuple): Tuple of allowed file extensions.

    Returns:
        list: List of image file paths.
    """
    image_paths = []
    if os.path.exists(directory_path):
        for filename in os.listdir(directory_path):
            if filename.lower().endswith(extensions) and os.path.isfile(os.path.join(directory_path, filename)):
                image_paths.append(os.path.join(directory_path, filename))
    else:
        raise InvalidPathError(f"Image directory '{directory_path}' not found.")
    return image_paths

def run_inference(model, image_paths, save=False, conf=0.5):
    """
    Run inference on the provided model and a list of image paths.

    Args:
        model (YOLO): Pretrained YOLOv8 model.
        image_paths (list): List of image file paths to perform inference on.
        save (bool): Whether to save the inference results or not.
        conf (float): Confidence threshold for object detection.

    Returns:
        list: List of inference results.
    """
    results = []
    for path in image_paths:
        try:
            results.extend(model(path, save=save, conf=conf))
        except Exception as e:
            print(f"Error processing image '{path}': {e}")
    return results

def main():
    # Defining paths
    model_path = 'yolov8n.pt'
    images_directory = 'All_Images'

    # Loading the YOLOv8n model
    model = load_yolov8_model(model_path)

    # Getting a list of image paths
    image_paths = get_image_paths(images_directory)

    # Running inference on the images
    results = run_inference(model, image_paths, save=True)



if __name__ == "__main__":
    main()
